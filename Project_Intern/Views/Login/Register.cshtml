@model Project_Intern.Models.account

@{
    ViewBag.Title = "Register";
    Layout = "~/Views/Shared/Register.cshtml";
}
<div class="limiter">
    <div class="container-login100">
        <div class="wrap-login100">
            <form class="login100-form validate-form" method="post" action="register">
                @Html.AntiForgeryToken()
                <span class="login100-form-title"> Member Register </span>
                <p class="text-center danger" id="err">

                </p>
                <!-- Name -->
                <div class="wrap-input100 validate-input">
                    @Html.EditorFor(model => model.username, new
                    {
                        htmlAttributes = new
                        {
                            @class = "input100",
                            @type = "text",
                            @pattern = "[a-zA-Z]+",
                            @title = "Alphabetical letters only",
                                   @name = "fname",
                            @id = "fname",
                            @placeholder = "User Name"
                        }
                    })
                    @Html.ValidationMessageFor(model => model.username, "", new { @class = "text-danger" })
                    <span class="focus-input100"></span>
                    <span class="symbol-input100">
                        <i class="fa-solid fa-circle-user"></i>
                    </span>
                </div>

                <div class="wrap-input100 validate-input">
                    @Html.EditorFor(model => model.fullname, new
                    {
                        htmlAttributes = new
                        {
                            @class = "input100",
                            @type = "text",
                            @pattern = "[a-zA-Z]+",
                            @title = "Alphabetical letters only",
                                   @name = "fname",
                            @id = "fname",
                            @placeholder = "Full Name"
                        }
                    })
                    @Html.ValidationMessageFor(model => model.fullname, "", new { @class = "text-danger" })
                    <span class="focus-input100"></span>
                    <span class="symbol-input100">
                        <i class="fa-solid fa-circle-user"></i>
                    </span>
                </div>
                <!-- Address -->
                <div class="wrap-input100 validate-input">
                    @Html.EditorFor(model => model.city, new { htmlAttributes = new { @class = "input100", @type = "text", @name = "address", @placeholder = "Address" } })
                    @Html.ValidationMessageFor(model => model.city, "", new { @class = "text-danger" })
                    <span class="focus-input100"></span>
                    <span class="symbol-input100">
                        <i class="fa-solid fa-house"></i>
                    </span>
                </div>
                <!-- Phone -->
                <div class="wrap-input100 validate-input">

                    @Html.EditorFor(model => model.phone, new
                    {
                        htmlAttributes = new
                        {
                            @class = "input100",
                            @type = "text",
                            @pattern = "(0)(3|5|7|8|9)+([0-9]{8})",
                            @id = "phone",
                           @title = "Must start with 09/03/07/08/05 and contain 10 characters",
                            @name = "phone",
                           @placeholder = "Phone"
                        }
                    })
                    @Html.ValidationMessageFor(model => model.phone, "", new { @class = "text-danger" })
                    <span class="focus-input100"></span>
                    <span class="symbol-input100">
                        <i class="fa-solid fa-mobile-button"></i>
                    </span>
                </div>

                <!-- Email -->
                <div class="wrap-input100 validate-input">
                    @Html.EditorFor(model => model.email, new
                    {
                        htmlAttributes = new
                        {
                            @class = "input100",
                            @type = "text",
                            @name = "email",
                            @id = "email",
                            @placeholder = "Email"
                           ,
                            @title = "Must contain  required "
                        }
                    })
                    @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
                    <span class="focus-input100"></span>
                    <span class="symbol-input100">
                        <i class="fa-solid fa-envelope"></i>
                    </span>

                </div>
                <!-- Password -->
                <div class="wrap-input100 validate-input">
                    @Html.EditorFor(model => model.password, new { htmlAttributes = new { @class = "input100", @type = "password", @name = "password", @id = "password", @placeholder = "Password" } })
                    @Html.ValidationMessageFor(model => model.password, "", new { @class = "text-danger" })
                    <span class="focus-input100"></span>
                    <span class="symbol-input100">
                        <i class="fa fa-lock" aria-hidden="true"></i>
                    </span>
                </div>
                <div class="container-login100-form-btn">
                    <button type="submit" class="btn btn-danger login100-form-btn">Create Account</button>
                </div>
                <hr />
                <div class="row">
                    <div class="col-md-3">
                        <a class="btn btn-outline-dark" href="http://localhost:5000/auth/google" role="button"
                           style="text-transform:none; width: 290px">
                            <img width="20px" style="margin-bottom:3px; margin-right:5px" alt="Google sign-in"
                                 src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/512px-Google_%22G%22_Logo.svg.png" />
                            Sign up with Google
                        </a>
                    </div>
                </div>

                <div class="text-center p-t-136" id="create-account">
                    <a class="txt2" href="@Url.Action("Index","Login")">
                        <i class="fa fa-long-arrow-left m-l-5" aria-hidden="true"></i>
                        Already have account? Login
                    </a>
                </div>
            </form>
            <div class="chat-bubbles">
                <div class="message bubbles" id="fnameinvalid">
                    <p>Names cannot contain numeric or special characters</p>
                </div>
                <div class="message bubbles" id="lnameinvalid">
                    <p>Names cannot contain numeric or special characters</p>
                </div>
                <div class="message bubbles">
                    <br /><br /><br /><br />
                </div>
                <div class="message bubbles" id="phoneinvalid">
                    <span>Phone numbers cannot contain alphabetical characters, </span><br />
                    <span> special characters, must start with 09/03/07/08/05 and</span><br />
                    <span> contain exactly 10 characters</span>
                </div>
                <div class="message bubbles" id="emailinvalid">
                    <p>Emails must contain </p>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
            var fname = document.getElementById("fname");
            var lname = document.getElementById("lname");
            var phone = document.getElementById("phone");
            var email = document.getElementById("email");
            var password = document.getElementById("password")

            fname.onkeyup = function () {
                var numbers = /[0-9]/g;
                var specs = /[ `!#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~]/;
                if (fname.value.match(numbers) || fname.value.match(specs)) {
                    document.getElementById("fnameinvalid").style.visibility = "visible";
                } else {
                    document.getElementById("fnameinvalid").style.visibility = "hidden";
                }

            }

            lname.onkeyup = function () {
                var numbers = /[0-9]/g;
                var specs = /[ `!#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~]/;
                if (lname.value.match(numbers) || lname.value.match(specs)) {
                    document.getElementById("lnameinvalid").style.visibility = "visible";
                } else {
                    document.getElementById("lnameinvalid").style.visibility = "hidden";
                }
            }

            phone.onkeyup = function () {
                var letters = /[a-zA-Z]/g;
                var specs = /[ `!#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~]/;

                if (phone.value.startsWith("03") || phone.value.startsWith("05") || phone.value.startsWith("07") || phone.value.startsWith("08") || phone.value.startsWith("09")) {
                    if (phone.value.match(letters) || phone.value.match(specs) || phone.value.length !== 10) {
                        document.getElementById("phoneinvalid").style.visibility = "visible";
                    } else {
                        document.getElementById("phoneinvalid").style.visibility = "hidden";
                    }
                } else {
                    document.getElementById("phoneinvalid").style.visibility = "visible";
                }

                 if (phone.value.match(letters)) {
                    document.getElementById("phoneinvalid1").style.display = "block";
                 } else {
                     document.getElementById("phoneinvalid1").style.display = "none";
                 }
                 var specs = /[ `!#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~]/;
                 if (phone.value.match(specs)) {
                     document.getElementById("phoneinvalid2").style.display = "block";
                } else {
                     document.getElementById("phoneinvalid2").style.display = "none";
                 }
                 if (phone.value.length !== 10) {
                     document.getElementById("phoneinvalid3").style.display = "block";
                 } else {
                     document.getElementById("phoneinvalid3").style.display = "none";
                }
                 if (phone.value.startsWith("03") || phone.value.startsWith("05") || phone.value.startsWith("07") || phone.value.startsWith("08") || phone.value.startsWith("09")) {
                     document.getElementById("phoneinvalid4").style.display = "none";
                 } else {
                   document.getElementById("phoneinvalid4").style.display = "block";
                 }
            }

            email.onkeyup = function () {
                if (email.value.includes("") === true) {
                    document.getElementById("emailinvalid").style.visibility = "hidden";
                } else {
                    document.getElementById("emailinvalid").style.visibility = "visible";
                }
            }
</script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"
        integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous">
</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
 


